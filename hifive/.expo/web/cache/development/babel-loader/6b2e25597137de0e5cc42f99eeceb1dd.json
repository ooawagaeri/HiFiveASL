{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ReactNative from \"react-native-web/dist/index\";\nimport { childrenWithOverriddenStyle } from \"./utils\";\nimport { getViewManagerConfig, PagerViewViewManager } from \"./PagerViewNative\";\nexport var PagerView = function (_React$Component) {\n  _inherits(PagerView, _React$Component);\n\n  var _super = _createSuper(PagerView);\n\n  function PagerView() {\n    var _this;\n\n    _classCallCheck(this, PagerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"isScrolling\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"animationFrameRequestId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"PagerView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getInnerViewNode\", function () {\n      return _this.PagerView.current.getInnerViewNode();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageScroll\", function (e) {\n      if (_this.props.onPageScroll) {\n        _this.props.onPageScroll(e);\n      }\n\n      if (Platform.OS === 'android') {\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageScrollStateChanged\", function (e) {\n      if (_this.props.onPageScrollStateChanged) {\n        _this.props.onPageScrollStateChanged(e);\n      }\n\n      _this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageSelected\", function (e) {\n      if (_this.props.onPageSelected) {\n        _this.props.onPageSelected(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPage\", function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setPage, [selectedPage]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPageWithoutAnimation\", function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setPageWithoutAnimation, [selectedPage]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setScrollEnabled\", function (scrollEnabled) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setScrollEnabled, [scrollEnabled]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onMoveShouldSetResponderCapture\", function () {\n      return _this.isScrolling;\n    });\n\n    return _this;\n  }\n\n  _createClass(PagerView, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.animationFrameRequestId !== undefined) {\n        cancelAnimationFrame(this.animationFrameRequestId);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (Platform.OS === 'android' && this.props.initialPage !== undefined) {\n        this.animationFrameRequestId = requestAnimationFrame(function () {\n          if (_this2.props.initialPage !== undefined) {\n            _this2.setPageWithoutAnimation(_this2.props.initialPage);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PagerViewViewManager, _extends({}, this.props, {\n        ref: this.PagerView,\n        style: this.props.style,\n        onPageScroll: this._onPageScroll,\n        onPageScrollStateChanged: this._onPageScrollStateChanged,\n        onPageSelected: this._onPageSelected,\n        onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture,\n        children: childrenWithOverriddenStyle(this.props.children)\n      }));\n    }\n  }]);\n\n  return PagerView;\n}(React.Component);","map":{"version":3,"sources":["PagerView.tsx"],"names":["React","componentWillUnmount","cancelAnimationFrame","componentDidMount","Platform","requestAnimationFrame","e","Keyboard","selectedPage","UIManager","ReactNative","getViewManagerConfig","scrollEnabled","render","PagerView","childrenWithOverriddenStyle"],"mappings":"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","sourcesContent":["import React, { ReactElement } from 'react';\nimport { Platform, UIManager, Keyboard } from 'react-native';\nimport ReactNative from 'react-native';\nimport type {\n  PagerViewOnPageScrollEvent,\n  PagerViewOnPageSelectedEvent,\n  PageScrollStateChangedNativeEvent,\n  PagerViewProps,\n} from './types';\n\nimport { childrenWithOverriddenStyle } from './utils';\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `PagerView` will be treated as a separate page\n * and will be stretched to fill the `PagerView`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <PagerView\n *       style={styles.PagerView}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </PagerView>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   PagerView: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\n\nexport class PagerView extends React.Component<PagerViewProps> {\n  private isScrolling = false;\n  private animationFrameRequestId?: number;\n  private PagerView = React.createRef<typeof PagerViewViewManager>();\n\n  componentWillUnmount() {\n    if (this.animationFrameRequestId !== undefined) {\n      cancelAnimationFrame(this.animationFrameRequestId);\n    }\n  }\n\n  componentDidMount() {\n    // On iOS we do it directly on the native side\n    if (Platform.OS === 'android' && this.props.initialPage !== undefined) {\n      this.animationFrameRequestId = requestAnimationFrame(() => {\n        if (this.props.initialPage !== undefined) {\n          this.setPageWithoutAnimation(this.props.initialPage);\n        }\n      });\n    }\n  }\n\n  public getInnerViewNode = (): ReactElement => {\n    return this.PagerView.current!.getInnerViewNode();\n  };\n\n  private _onPageScroll = (e: PagerViewOnPageScrollEvent) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n    // Not implemented on iOS yet\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private _onPageScrollStateChanged = (\n    e: PageScrollStateChangedNativeEvent\n  ) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e);\n    }\n    this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private _onPageSelected = (e: PagerViewOnPageSelectedEvent) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will be animated.\n   */\n  public setPage = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setPage,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will *not* be animated.\n   */\n  public setPageWithoutAnimation = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setPageWithoutAnimation,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to enable/disable scroll imperatively\n   * The recommended way is using the scrollEnabled prop, however, there might be a case where a\n   * imperative solution is more useful (e.g. for not blocking an animation)\n   */\n  public setScrollEnabled = (scrollEnabled: boolean) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setScrollEnabled,\n      [scrollEnabled]\n    );\n  };\n\n  private _onMoveShouldSetResponderCapture = () => {\n    return this.isScrolling;\n  };\n\n  render() {\n    return (\n      <PagerViewViewManager\n        {...this.props}\n        ref={this.PagerView as any /** TODO: Fix ref type */}\n        style={this.props.style}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        onMoveShouldSetResponderCapture={this._onMoveShouldSetResponderCapture}\n        children={childrenWithOverriddenStyle(this.props.children)}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}